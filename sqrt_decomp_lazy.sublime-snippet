<snippet>
	<content><![CDATA[
// block size
lint blk=1;

// sqrt decomp code to range update (increase range by val) and range query (find the sum of range)

// also create a vector of size blk initialized with 0 to maintain lazy updates 
vector<lint> create_sqrt_array(vector<lint> arr)
{
    lint n=arr.size();
    blk=high(sqrt(n),1.00);
    vector<lint> sqrt_array(blk,0);
    for(lint i=0;i<n;i++)
    {
        sqrt_array[i/blk]=sqrt_array[i/blk]+arr[i];
    }
    return sqrt_array;
}

// l and r are 1 based indexing
// O(sqrt(n)) query
lint sqrt_query(vector<lint> &arr,vector<lint> &sqrt_array,vector<lint> &lazy,lint l,lint r)
{
    l--;
    r--;
    lint ans=0;
    lint l_blk=l/blk;
    lint r_blk=r/blk;
    if(lazy[l_blk]!=0)
    {
        for(lint i=l_blk*blk;i<=(l_blk+1)*blk-1;i++)
        {
            arr[i]=arr[i]+lazy[l_blk];
            sqrt_array[l_blk]=sqrt_array[l_blk]+lazy[l_blk];
        }
        lazy[l_blk]=0;
    }
    if(lazy[r_blk]!=0)
    {
        for(lint i=r_blk*blk;i<=(r_blk+1)*blk-1;i++)
        {
            arr[i]=arr[i]+lazy[r_blk];
            sqrt_array[r_blk]=sqrt_array[r_blk]+lazy[r_blk];
        }
        lazy[r_blk]=0;
    }
    if(l_blk==r_blk)
    {
        for(lint i=l;i<=r;i++)
        {
            ans=ans+arr[i];
        }
        return ans;
    }
    for(lint i=l;i<=(l_blk+1)*blk-1;i++)
        ans=ans+arr[i];
    for(lint i=l_blk+1;i<=r_blk-1;i++)
        ans=ans+sqrt_array[i]+(lazy[i]*blk);
    for(lint i=r_blk*blk;i<=r;i++)
        ans=ans+arr[i];
    return ans;
}

// l and r are 1 based indexing
void sqrt_range_update(vector<lint> &arr,vector<lint> &sqrt_array,vector<lint> &lazy,lint l,lint r,lint val)
{

    l--;
    r--;
    lint l_blk=l/blk;
    lint r_blk=r/blk;
    if(lazy[l_blk]!=0)
    {
        for(lint i=l_blk*blk;i<=(l_blk+1)*blk-1;i++)
        {
            arr[i]=arr[i]+lazy[l_blk];
            sqrt_array[l_blk]=sqrt_array[l_blk]+lazy[l_blk];
        }
        lazy[l_blk]=0;
    }
    if(lazy[r_blk]!=0)
    {
        for(lint i=r_blk*blk;i<=(r_blk+1)*blk-1;i++)
        {
            arr[i]=arr[i]+lazy[r_blk];
            sqrt_array[r_blk]=sqrt_array[r_blk]+lazy[r_blk];
        }
        lazy[r_blk]=0;
    }
    if(l_blk==r_blk)
    {
        for(lint i=l;i<=r;i++)
        {
            arr[i]=arr[i]+val;
            sqrt_array[l_blk]=sqrt_array[l_blk]+val;
        }
        return;
    }

    for(lint i=l;i<=(l_blk+1)*blk-1;i++)
    {
        arr[i]=arr[i]+val;
        sqrt_array[l_blk]=sqrt_array[l_blk]+val;
    }
    for(lint i=l_blk+1;i<=r_blk-1;i++)
        lazy[i]=lazy[i]+val;
    for(lint i=r_blk*blk;i<=r;i++)
    {
        arr[i]=arr[i]+val;
        sqrt_array[r_blk]=sqrt_array[r_blk]+val;
    }

}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>sqrt_decomp_lazy</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
