<snippet>
	<content><![CDATA[
//sparse segtree with lazy prop
//segtree,lchild,rchild size -> 3*(Q * log(max range size)) + 1000
//initialize lchild and rchild by 0
//idx=1 denotes root of segment tree so it is pre fixed

//stores buffer length
//reinitialize to 0 after every tc
lint idx=1;

struct node{
    lint data;
    lint lazy=0;
};

//build will be done by update as well
//r not included and l and r are 1 based indexing
lint update(vector<struct node> &segtree,vector<lint> &lchild,vector<lint> &rchild,lint pos1,lint pos2,lint val,lint x,lint l,lint r)
{
    if(segtree[x].lazy!=0)
    {
        segtree[x].data=segtree[x].data+((r-l)*segtree[x].lazy);
        if(l!=r-1)
        {
            if(lchild[x]==0)
            {
                idx++;
                lchild[x]=idx;
            }    
            if(rchild[x]==0)
            {
                idx++;
                rchild[x]=idx;
            }
            segtree[lchild[x]].lazy=segtree[lchild[x]].lazy+segtree[x].lazy;
            segtree[rchild[x]].lazy=segtree[rchild[x]].lazy+segtree[x].lazy;
        }
        segtree[x].lazy=0;        
    }
    if(l>=pos2||r<=pos1)
        return x;
    if(!x)
    {
        idx++;
        x=idx;
    }
    if(l>=pos1&&r<=pos2)
    {
        lint range=r-l;
        segtree[x].data=segtree[x].data+(range*val);
        
        if(l!=r-1)
        {

            
            if(lchild[x]==0)
            {
                idx++;
                lchild[x]=idx;
            }    
            if(rchild[x]==0)
            {
                idx++;
                rchild[x]=idx;
            }
            segtree[lchild[x]].lazy=segtree[lchild[x]].lazy+val;
            segtree[rchild[x]].lazy=segtree[rchild[x]].lazy+val;
        }
        return x;
    }
    lint mid=(l+r)/2;
    lchild[x]=update(segtree,lchild,rchild,pos1,pos2,val,lchild[x],l,mid);
    rchild[x]=update(segtree,lchild,rchild,pos1,pos2,val,rchild[x],mid,r);
    segtree[x].data=(segtree[lchild[x]].data+segtree[rchild[x]].data);
    return x;

}

//r and R are not included
//l,r,L,R are 1 based indexing
lint query(vector<struct node> &segtree,vector<lint> &lchild,vector<lint> &rchild,lint L,lint R,lint x,lint l,lint r)
{
    if(segtree[x].lazy!=0)
    {
        segtree[x].data=segtree[x].data+((r-l)*segtree[x].lazy);
        if(l!=r-1)
        {
            if(lchild[x]==0)
            {
                idx++;
                lchild[x]=idx;
            }    
            if(rchild[x]==0)
            {
                idx++;
                rchild[x]=idx;
            }
            segtree[lchild[x]].lazy=segtree[lchild[x]].lazy+segtree[x].lazy;
            segtree[rchild[x]].lazy=segtree[rchild[x]].lazy+segtree[x].lazy;
        }
        segtree[x].lazy=0;        
    }
    if(l>=R||r<=L)
        return 0;
    if(!x)
        return 0;
    if(l>=L&&r<=R)
    {
        return segtree[x].data;
    }
    lint mid=(l+r)/2;
    return (query(segtree,lchild,rchild,L,R,lchild[x],l,mid)+query(segtree,lchild,rchild,L,R,rchild[x],mid,r));
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>st_sparse_lazy</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
