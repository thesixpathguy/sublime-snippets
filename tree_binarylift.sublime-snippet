<snippet>
	<content><![CDATA[
//depth of 1 = -1 (initialize)
//intial c in main will be 1
void dwpath(vector<vector<lint>> &adj,lint *visited,lint s,lint c,lint *parent,lint *depth)
{
    if(visited[s])
        return;
    visited[s]=1;
    parent[s]=c;
    depth[s]=depth[c]+1;
    for(auto u:adj[s])
    {
        if(c!=u)
        {
            dwpath(adj,visited,u,s,parent,depth);
        }
    }
}

//O(n*log(n))
//--------ceil of log n--------
void precomputation(vector<vector<lint>> &adj,vector<vector<lint>> &pre,lint *parent,lint lim,lint n)
{
    for(lint i=1;i<=n;i++)
    {
        pre[i][0]=parent[i];
    }
    for(lint i=1;i<lim;i++)
    {
        for(lint j=1;j<=n;j++)
        {
            pre[j][i]=pre[pre[j][i-1]][i-1];
        }
    }
}

//ancestor k steps up from node s
//depth function gives -1 if ancestor does not exist
//if remove depth function then any ancestor higher than root will be root
lint binary_lifting(vector<vector<lint>> &adj,vector<vector<lint>> &pre,lint *depth,lint lim,lint n,lint s,lint k)
{
    if(depth[s]<k)
        return -1;
    for(lint i=0;i<lim;i++)
    {
        if(k&(1<<i))
        {
            s=pre[s][i];
        }
    }
    return s;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tree_binarylift</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
